




class Solution {
public:
//arrange in descending order because we need to check nearest smallest element of the given number 
//for ex: num = 1994 
//so how to do : --> here we find nearest smalles no in arr -> 1000
// than as we do : 1994-1000 = 994 --> we got (M) in ans
//again now we have : 994-900 = 94 --> we got (CM) in ans
//than : 94-90 = 4  --> we got (XC) in ans
//than : 4-4 = 0 --> we got (IV) in ans 
 //    : as we reach to 0 ele we need to stop here in ans we got 
 //    ans = MCMXCIV

    string intToRoman(int num) {

        int arr[13] = {1000,900,500,400,100,90,50,40,10,9,5,4,1};
        string symbol[13] = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};

        string res = "";  //to append ans
        while(num > 0){
            for(int i=0;1<13;i++){

                if(num >= arr[i]){
                    num -= arr[i];
                    res += symbol[i];
                    break;
                }
            }
        }
       return res;
    }
};

#################### approach using map
map<int,string> mp;
	mp[1]="I";
	mp[4]="IV";
	mp[5]="V";
	mp[9]="IX";
	mp[10]="X";
	mp[40]="XL";
	mp[50]="L";
	mp[90]="XC";
	mp[100]="C";
	mp[400]="CD";
	mp[500]="D";
	mp[900]="CM";
	mp[1000]="M";
	// dbg(mp)
	string ans="";
	while(num>0) {
		for(auto it=mp.rbegin();it!=mp.rend();it++) {
			while(num>=it->first) {
				ans+=it->second;
				num-=it->first;
				// break;
			}
		}
	}
	return ans;
  
  C++ Easy Solution||S.C=>O(1)||

  
  class Solution {
public:
    string intToRoman(int num) {
         string onescounting[] = {"","I","II","III","IV","V","VI","VII","VIII","IX"};
        string tenscounting[] = {"","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"};
        string hundredcounting[] ={"","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"};
        string thousandcounting[]={"","M","MM","MMM"};
        
        return thousandcounting[num/1000] + hundredcounting[(num%1000)/100] + tenscounting[(num%100)/10] + onescounting[num%10];
    }
