Input: n = 4
Output: "1211"
Explanation:
countAndSay(1) = "1"
countAndSay(2) = say "1" = one 1 = "11"
countAndSay(3) = say "11" = two 1's = "21"
countAndSay(4) = say "21" = one 2 + one 1 = "12" + "11" = "1211"


Approach:  
n = 1: return 1 is the base case
n = 2: return count of last entry i.e. 1 1
n = 3: return count of last entry i.e. two 1's so 21
n = 4: we have one 2 and one 1 so 1211
n = 5: , we have one 1 and one 2 and two 1's so -> 111221
n = 6: we have three 1's, two 2's and one 1 so -> 312211
n = 7: we have one 3, one 1, two 2's and two 1's -> 13112221
...
n = i: return counts in front of the number for entry of i-1 case

class Solution {
public:
    string countAndSay(int n) {
        //base case
        if(n==1){
           return "1";
        }
        
        //recursive call to store previous ans
        string s = countAndSay(n-1);
        string res="";
        int count=0;
        for(int i=0;i<s.length();i++){
            count++;
            //jaise hi ek elem ka count khtm ho next ele mile count ko 0 se update krdo or usko ans me daal do 
           if(i == s.length()-1 || s[i] != s[i+1]){  //kyki i+1 tk compare krrhe islue n-1 tk gye
              res = res + to_string(count) + s[i];
              count = 0;
           } 
        }
        return res;
    }
};


################################ without recursion
string countAndSay(int n) {
    
    if(n==1) return "1";                       //if n==1, return "1"
    if(n==2) return "11";                      //if n==2, return "11"
    
    string s="11";                             //initialise s = "11"
    
    for(int i=3;i<=n;i++){
        
        string temp="";                        //empty string, temp
        s+= '$';                               //append a random character, therefore, s = "11$"
        int count=1;                           //initially count = 1
        
        for(int j=1;j<s.size();j++){           //traverse string s from idx 1 to s.size()
            
            if(s[j]!=s[j-1]){                  //if curr_character and prev_character doesn't match
                
                temp+= to_string(count);       //First,  add count to temp string
                temp+= s[j-1];                 //Second, add the character (prev_character)
                count=1;                       //Third,  reset the count
            }
            else count++;                      //if curr_character and prev_character match, increment count
            
        }
        
        s=temp;                                //Update string s wuth temp
    }
    
    return s;                                  //return s
}
