344. Reverse String
Input: s = ["h","e","l","l","o"]
Output: ["o","l","l","e","h"]


1) The 1st Approach is very easy I have used a simple STL function to reverse the whole string.

class Solution {
public:
    void reverseString(vector<char>& s) {
 
     reverse(s.begin(),s.end());
    }
};


2) The 2nd Approach is basically 2 pointer approach in which one pointer will be at the first index of the string and second pointer will point to the last index of the string, then we simply swap them and move the front pointer forwards and the back pointer backwards.


void reverseString(vector<char>& s)  {
    int i = 0;
    int j = s.size()-1;
    
    while(i<j)
    {
        swap(s[i],s[j]);
        i++; j--;
    }
}


3) The 3rd approach is recursion which is same like as we saw above in the 2nd approach, the only difference is that we have to move only just the front pointer not the back one. Also don't forget to add the base condition where the recursive calls should stop when the front pointer will be greater than half of the back pointer.


class Solution {
private:
    void recursive(vector<char>& s, int i, int l) {
    if(i>l/2)
        return;
        
    swap(s[i],s[l-i]);
    recursive(s,i+1,l);
}

public:
    void reverseString(vector<char>& s) {
        recursive(s,0,s.size()-1);
    }
};
